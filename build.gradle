buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        // classpath 'net.saliman:gradle-cobertura-plugin:2.2.4'
        classpath 'info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.1.1'
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.1.0'
    }
}

allprojects {
    apply plugin: 'com.github.kt3k.coveralls'
    apply plugin: 'jacoco' // 'cobertura'

    repositories {
        mavenCentral()
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'info.solidsoft.pitest'

    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'

    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

    group               = "co.paralleluniverse"
    version             = "1.0.4-ullink3-SNAPSHOT"
    status              = "integration"
    description         = "Simple Java deployment"
    ext.url             = "https://github.com/puniverse/capsule"
    ext.vendor          = "Parallel Universe Software Co."
    ext.licenseName     = "Eclipse Public License - v 1.0"
    ext.licenseUrl      = "http://www.eclipse.org/legal/epl-v10.html"
    ext.scmUrl          = "https://github.com/puniverse/capsule"
    ext.scmConnection   = "https://github.com/puniverse/capsule.git"
    ext.distDir         = "$buildDir/dist"
    ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

    // User and Password are taken from ~/.gradle/gradle.properties
    if (!project.hasProperty("sonatypeUsername") || !project.hasProperty("sonatypePassword")) {
        println "sonatype username or password not set"
        ext.sonatypeUsername = ""
        ext.sonatypePassword = ""
    }

    configurations {
        javancss
    }

    configurations {
        [compile, runtime]*.resolutionStrategy {
            failOnVersionConflict()
        }
    }

    dependencies {
        testCompile 'junit:junit:4.12'
        testCompile 'org.truth0:truth:0.23'
        testCompile 'com.google.jimfs:jimfs:1.1'
        testCompile 'org.jooq:joor:0.9.6'
        javancss 'org.codehaus.javancss:javancss:33.54'
    }

    test {
        systemProperty "java.protocol.handler.pkgs", "co.paralleluniverse.filesystem"

        beforeTest { desc ->
            logger.quiet("Running test: " + desc)
        }

        afterTest { desc, result ->
            if(result.resultType == TestResult.ResultType.FAILURE) {
                logger.quiet("Failed test ${desc.name} [${desc.className}] with exception: ${result.exception}")
                if(result.exception != null) {
                    result.exception.printStackTrace()
                }
            }
        }
    }

    pitest {
        targetClasses = ['Capsule', 'capsule.*', 'co.paralleluniverse.*']
        targetTests = ['CapsuleTest', 'capsule.*', 'co.paralleluniverse.*']

         jvmArgs = ['-Djava.protocol.handler.pkgs=co.paralleluniverse.filesystem']
    }

    task run(type: JavaExec, dependsOn:[testClasses]) {
        classpath = sourceSets.main.runtimeClasspath
        if(project.hasProperty('mainClass')){
            main = project.mainClass
        }
        if(project.hasProperty('args')){
            args project.args.split('\\s+')
        }
    }

    tasks.withType(JavaExec) {
        classpath += sourceSets.test.runtimeClasspath
    }

    jacocoTestReport {
        reports {
            xml.enabled = true // coveralls plugin depends on xml format report
            html.enabled = true
            csv.enabled = false
//          xml.destination = "${buildDir}/reports/jacoco/test/jacocoTestReport_${project.name}.xml"
        }
    }

//  check.dependsOn jacocoTestReport

    javadoc {
        options.links = [ "http://docs.oracle.com/javase/7/docs/api/" ]
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    //    tasks.withType(JavaCompile) {
    //        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    //    }

    task javancss(dependsOn: 'classes') {
        doLast {
            ant {
                logging.level = LogLevel.INFO
                taskdef(name: 'javancss', classname: 'javancss.JavancssAntTask', classpath: configurations.javancss.asPath)
                javancss(
                        srcdir: 'src/main/java',
                        abortOnFail: 'true',
                        generateReport: 'true',
                        packageMetrics: 'true',
                        classMetrics: 'false',
                        functionMetrics: 'false'
                        // outputFile: reportName,
                )
            }
        }
    }

    assemble.dependsOn javancss

    ///////// Publish Artifacts
    apply plugin: 'maven'
    apply plugin: 'signing'

    artifacts {
        archives jar
        archives sourcesJar
        archives javadocJar
    }

    signing {
        required { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { deployment -> signing.signPom(deployment) }

                repository(
                    url: (isReleaseVersion ?
                              "https://oss.sonatype.org/service/local/staging/deploy/maven2" :
                              "https://oss.sonatype.org/content/repositories/snapshots")) {
                    authentication(userName: sonatypeUsername, password: sonatypePassword)
                }

                pom.project {
                    name project.name
                    packaging 'jar'
                    description project.description
                    url project.url
                    scm {
                        url project.scmUrl
                        connection project.scmConnection
                        developerConnection project.scmConnection
                    }
                    licenses {
                        license {
                            name project.licenseName
                            url project.licenseUrl
                            distribution 'repo'
                        }
                    }
                    developers {
                        developer {
                            id 'pron'
                            name 'Ron Pressler'
                        }
                    }
                }
            }
        }
    }

    defaultTasks 'build'
}

project (':capsule') {
    dependencies {
        testCompile project(':capsule-util')
    }

    jar {
        manifest {
            attributes('Main-Class'    : 'Capsule',
                       'Premain-Class' : 'Capsule')
        }
    }

    javadoc {
        options.noDeprecated = true
        excludes = [ "capsule/**" ]
    }
}

project (':capsule-util') {
    dependencies {
        runtime project(':capsule')
        compile files("${System.getProperty('java.home')}/../lib/tools.jar")
    }

    javadoc {
        excludes = ["co/paralleluniverse/common/**",
                    "co/paralleluniverse/filesystem/**"
        ]
    }
}

task jacocoRootReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
    dependsOn = subprojects.test
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories =  files(subprojects.sourceSets.main.output)
    executionData = files(subprojects.jacocoTestReport.executionData)
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
        //xml.destination = "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
    }
}

coveralls {
    sourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs).files.absolutePath
    jacocoReportPath = "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
}
